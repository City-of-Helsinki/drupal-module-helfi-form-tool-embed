<?php

namespace Drupal\helfi_formtool_embed\Plugin\Field\FieldWidget;

use Drupal\Core\Field\PluginSettingsBase;
use Drupal\Component\Serialization\Json;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Field\WidgetBase;
use Drupal\Core\Form\FormStateInterface;

/**
 * Defines the 'embed_form' field widget.
 *
 * @FieldWidget(
 *   id = "embed_form",
 *   label = @Translation("EmbedForm"),
 *   field_types = {"embed_form"},
 * )
 */
class EmbedFormWidget extends WidgetBase {


  /**
   * Allowed editable attributes of iframe field on node-edit.
   *
   * @var array
   */
  public array $allowedAttributes = [
    'embed_form_id' => 1,
    'embed_form_data' => 1,
  ];

  /**
   * {@inheritdoc}
   */
  public static function defaultSettings(): array {
    return [
        'embed_form_id' => '',
        'embed_form_data' => '',
      ] + parent::defaultSettings();
  }

  /**
   * {@inheritdoc}
   */
  public function formElement(FieldItemListInterface $items, $delta, array $element, array &$form, FormStateInterface $form_state): array {

    $storage = $form_state->getStorage();
    $settings = $this->getSettings();


    /** @var \GuzzleHttp\Client $httpClient */
    $httpClient = \Drupal::service('http_client');

    $formToolUrl = getenv('FORM_TOOL_HOST');

    try {
      $response = $httpClient->get(
        $formToolUrl . '/formtool/metadata',
        [
          'headers' => [
            'User-Agent' => 'drupal/FormEmbed',
            'Accept' => 'application/json',
            'X-Auth-Token' => getenv('FORM_TOOL_TOKEN'),
          ],
        ]
      );

      $body = Json::decode($response->getBody()->getContents());

    } catch (\Exception $e) {
      \Drupal::logger('helfi_formtool_embed')->error($e->getMessage());
      $body['data'] = [];
    }

    $form_options = [];

    foreach ($body['data'] as $key => $value) {
      $form_options[$value['id']] = $value['title'];
    }

    $element['embed_form_id'] = [
      '#type' => 'select',
      '#title' => $this->t('Form ID'),
      '#options' => $form_options,
      '#default_value' => $settings['embed_form_id'] ?? '',
    ];

    // Move addressData object to form_state storage.
    $storage['form_meta_data'] = $body['data'];
    $form_state->setStorage($storage);

    return $element;
  }

  /**
   *
   */
  public function massageFormValues(array $values, array $form, FormStateInterface $form_state) {

    $storage = $form_state->getStorage();

    // @todo Change the autogenerated stub
    $massaged = parent::massageFormValues($values, $form, $form_state);

    foreach ($massaged as $delta => $value) {
      $selData = array_filter($storage['form_meta_data'], function ($item) use ($value) {
        if ($item['id'] === $value['embed_form_id']) {
          return TRUE;
        }
        return FALSE;
      });
      $selected = reset($selData);
      $massaged[$delta]['embed_form_data'] = Json::encode($selected);
      // $massaged[$delta]['embed_form_data'] = $selected;
    }
    return $massaged;
  }

  /**
   *
   */
  public function setSettings(array $settings): EmbedFormWidget|PluginSettingsBase {
    // @todo Change the autogenerated stub
    return parent::setSettings($settings);
  }

  /**
   *
   */
  public function setSetting($key, $value) {
    // @todo Change the autogenerated stub
    return parent::setSetting($key, $value);
  }

}
